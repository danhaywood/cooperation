//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.09.10 at 09:30:22 PM AEST 
//

package au.org.cooperation.modules.base.dom.impl;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;
import javax.jdo.annotations.Column;
import javax.jdo.annotations.IdentityType;
import javax.jdo.annotations.Join;
import javax.jdo.annotations.Order;
import javax.jdo.annotations.PersistenceCapable;
import javax.jdo.annotations.Persistent;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.apache.isis.applib.annotation.DomainObject;
import org.apache.isis.applib.annotation.ParameterLayout;
import org.apache.isis.applib.annotation.Programmatic;

import au.org.cooperation.modules.base.dom.impl.OrganisationPerson.OrganisationPersonStatus;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Organisation", propOrder = { "name", "description", "aims", "plans", "goals" })
@PersistenceCapable(identityType = IdentityType.DATASTORE, schema = "cooperation")
@DomainObject()
@XmlJavaTypeAdapter(org.apache.isis.schema.utils.jaxbadapters.PersistentEntityAdapter.class)
public class Organisation {

	@XmlElement(required = true)
	@Column(allowsNull = "false")
	@Getter
	@Setter
	protected String name;

	@XmlElement
	@Column(allowsNull = "true")
	@Getter
	@Setter
	protected String description;

	@XmlElement()
	@Persistent(mappedBy = "organisation", column = "aim_id")
	@Order(column = "org_aim_idx")
	@Getter
	protected List<Aim> aims;

	@XmlElement(required = true)
	@Persistent(mappedBy = "organisation", column = "goal_id")
	@Order(column = "org_goal_idx")
	@Getter
	protected List<Goal> goals;

	@XmlTransient
	@Persistent(mappedBy = "organisation")
	@Getter(value = AccessLevel.PRIVATE)
	protected List<OrganisationPerson> persons;

	@XmlElement(required = true)
	@Persistent(mappedBy = "organisation", column = "plan_id")
	@Order(column = "org_plan_idx")
	@Getter
	protected List<Plan> plans;

	public Organisation() {
	}

	public Organisation(String name) {
		setName(name);
	}

	public String title() {
		return getName();
	}

	public Organisation addAim(@ParameterLayout(named = "Aim name") String name) {
		this.getAims().add(organisationRepository.createAim(this, name));
		return this;
	}

	public Organisation addGoal(@ParameterLayout(named = "Goal name") String name,
			@ParameterLayout(named = "Primary Aim") Aim aim) {
		this.getGoals().add(organisationRepository.createGoal(this, name, aim));
		return this;
	}

	public List<Aim> choices1AddGoal() {
		return this.getAims();
	}

	public String disableAddGoal() {
		if (this.getAims().size() == 0)
			return "A Goal must be linked to at least one Aim, so add an Aim first";
		else
			return null;
	}

	public Organisation addPlan(@ParameterLayout(named = "Plan name") String name) {
		this.getPlans().add(organisationRepository.createPlan(this, name));
		return this;
	}

	@Programmatic
	public Organisation addPerson(Person person) {
		this.getPersons()
				.add(organisationRepository.createOrganisationPerson(this, person, OrganisationPersonStatus.ACTIVE));
		return this;
	}
	
	public Integer getActiveLinkedPersonCount() {
		return this.listActiveOrganisationPersons().size();
	}

	public OrganisationPersons showLinkedPersons() {
		return new OrganisationPersons(this);
	}
	
	@Programmatic
	public boolean hasLinkedPerson(Person person) {
		boolean found = false;
		for (OrganisationPerson op : this.getPersons()) {
			if (op.getPerson().equals(person)) {
				found = true;
				break;
			}
		}
		return found;
	}

	@Programmatic
	public List<Person> listActivePersons() {
		List<Person> temp = new ArrayList<>();
		for (OrganisationPerson op : this.getPersons()) {
			if (op.getStatus().equals(OrganisationPersonStatus.ACTIVE)) {
				temp.add(op.getPerson());
			}
		}
		return temp;
	}
	
	@Programmatic
	public List<OrganisationPerson> listActiveOrganisationPersons() {
		List<OrganisationPerson> temp = new ArrayList<>();
		for (OrganisationPerson op : this.getPersons()) {
			if (op.getStatus().equals(OrganisationPersonStatus.ACTIVE)) {
				temp.add(op);
			}
		}
		return temp;
	}
	
	@Programmatic
	public List<Person> listInactivePersons() {
		List<Person> temp = new ArrayList<>();
		for (OrganisationPerson op : this.getPersons()) {
			if (op.getStatus().equals(OrganisationPersonStatus.INACTIVE)) {
				temp.add(op.getPerson());
			}
		}
		return temp;
	}
	
	@Programmatic
	public List<OrganisationPerson> listInactiveOrganisationPersons() {
		List<OrganisationPerson> temp = new ArrayList<>();
		for (OrganisationPerson op : this.getPersons()) {
			if (op.getStatus().equals(OrganisationPersonStatus.INACTIVE)) {
				temp.add(op);
			}
		}
		return temp;
	}
	

	@XmlTransient
	@Inject
	OrganisationRepository organisationRepository;

	@XmlTransient
	@Inject
	PersonRepository personRepository;


}
